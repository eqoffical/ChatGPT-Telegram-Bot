import config
import logging
import openai
import asyncio
import time
from aiogram import Bot, Dispatcher, executor, types
from googletrans import Translator

# log
logging.basicConfig(level=logging.INFO)

# launch time
start_time = time.time()

# translate
translator = Translator()

# init openai
openai.api_key = config.OPENAI_TOKEN

# init aiogram
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)

# /help command
@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
                         "/help - –ü–æ–∫–∞–∑—É—î –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏\n"
                         "/chat - –ü–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑—ñ –º–Ω–æ—é / –∑–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è\n"
                         "/status - –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –±–æ—Ç—É\n"
                         "/git - –ú—ñ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π GitHub\n"
                         "/kill - –ú–æ–∂–µ –Ω–µ —Ç—Ä–µ–±–∞?")

# /start command
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç üëã\n"
                        "–ß–∏–º —è –º–æ–∂—É –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏?\n"
                        "–ù–∞–ø–∏—à—ñ—Ç—å /help —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏.")

# /chat command
@dp.message_handler(commands=['chat'])
async def cmd_chat(message: types.Message):
    # remove the '/chat' command from the user's message to get the question
    question = message.text.replace('/chat', '', 1).strip()
    if question:
        model_engine = "text-davinci-003"
        max_tokens = 1024  # default 1024
        prompt = question
        completion = openai.Completion.create(
            engine=model_engine,
            prompt=prompt,
            max_tokens=max_tokens,
            temperature=0.7,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0
        )

        response_text = completion.choices[0].text
        translation = translator.translate(response_text, dest='uk')
        await message.answer("–î—É–º–∞—é . . .")
        await message.reply(translation.text)
    else:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å /chat —Ä–∞–∑–æ–º –∑—ñ —Å–≤–æ—ó–º –∑–∞–ø–∏—Ç–∞–Ω–Ω—è–º.\n"
                            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /chat –∫–æ–ª–∏ –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π python?")

"""
# chat command (old, without translation)
@dp.message_handler(commands=['chat'])
async def cmd_chat(message: types.Message):
    # remove the '/chat' command from the user's message to get the question
    question = message.text.replace('/chat', '', 1).strip()
    if question:
        model_engine = "text-davinci-003"
        max_tokens = 1024  # default 1024
        prompt = question
        completion = openai.Completion.create(
            engine=model_engine,
            prompt=prompt,
            max_tokens=max_tokens,
            temperature=0.5,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0
        )

        await message.answer("–î—É–º–∞—é . . .")
        await message.reply(completion.choices[0].text)
    else:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å /chat —Ä–∞–∑–æ–º –∑—ñ —Å–≤–æ—ó–º –∑–∞–ø–∏—Ç–∞–Ω–Ω—è–º.\n"
                            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /chat –∫–æ–ª–∏ –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π python?")
"""

# /status command
@dp.message_handler(commands=['status'])
async def cmd_status(message: types.Message):
    current_time = time.time() # current time
    elapsed_time = int(current_time - start_time) # time elapsed since the bot was launched in seconds
    hours, rem = divmod(elapsed_time, 3600) # converting time to hours, minutes, and seconds
    minutes, seconds = divmod(rem, 60)
    
    status_message = f"–Ø –æ–Ω–ª–∞–π–Ω —ñ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è!\n"
    status_message += f"–Ø —Ç—É—Ç —Å–∏–∂—É –≤–∂–µ: {hours:02d}:{minutes:02d}:{seconds:02d}"
    await message.answer(status_message)

# /git command
@dp.message_handler(commands=['git'])
async def cmd_help(message: types.Message):
    link = "https://github.com/eqoffical/ChatGPT-Telegram-Bot.git"
    await message.answer("–û—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º—ñ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π <a href='{}'>GitHub</a>".format(link), parse_mode=types.ParseMode.HTML)

# /kill command
@dp.message_handler(commands=['kill'])
async def cmd_kill(message: types.Message):
    # Check if the command was issued by the authorized user
    if message.from_user.username == 'eqoffical':
        await message.reply("–Ø –ø—ñ—à–æ–≤ —Å–ø–∞—Ç–∏ üò¥\n"
                            "–ù–∞ –¥–æ–±—Ä–∞–Ω—ñ—á!")
        # Stop the event loop
        await dp.storage.close()
        await dp.storage.wait_closed()
        exit()
    else:
        await message.reply("–í–∏ —Ö–æ—á–µ—Ç–µ –º–µ–Ω–µ –≤–±–∏—Ç–∏?!üò®\n"
                            "–í–±–∏–≤—Ü—è!")

# message handler
@dp.message_handler(commands=['help', 'chat', 'status', 'git', 'kill'])
async def gpt_answer(message: types.Message):
    pass

# run long-polling
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
    
