import config
import logging
import openai
import asyncio
import time
from aiogram import Bot, Dispatcher, executor, types

username = '' # PUT HERE YOUR USERNAME
logging.basicConfig(level=logging.INFO) # log
start_time = time.time() # launch time
count_requests = 0 # counting variable
openai.api_key = config.OPENAI_TOKEN # init openai
bot = Bot(token=config.TOKEN) # init aiogram
dp = Dispatcher(bot)

# /help command
@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
                         "/help - –ü–æ–∫–∞–∑—É—î –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏\n"
                         "/chat - –ü–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑—ñ –º–Ω–æ—é / –∑–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è\n"
                         "/status - –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –±–æ—Ç—É\n"
                         "/git - –ú—ñ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π GitHub\n"
                         "/kill - –ú–æ–∂–µ –Ω–µ —Ç—Ä–µ–±–∞?")

# /start command
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç üëã\n"
                        "–ß–∏–º —è –º–æ–∂—É –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏?\n"
                        "–ù–∞–ø–∏—à—ñ—Ç—å /help —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏")

# /chat command
@dp.message_handler(commands=['chat'])
async def cmd_chat(message: types.Message):
    global count_requests

    bot_username = (await bot.get_me()).username # Get the bot's username

    # Check if the bot name is mentioned in the message
    if f'@{bot_username}' in message.text:
        prompt = message.text.replace(f'/chat@{bot_username}', '', 1).strip() # Extract the prompt by removing the '/chat@botname' part
    else:
        prompt = message.text.replace('/chat', '', 1).strip() # Remove the '/chat' command from the user's message to get the question

    if prompt:
        await message.answer("–î—É–º–∞—é . . .")
        model_engine = "gpt-3.5-turbo"
        max_tokens = 1024  # default 1024
        completion = openai.ChatCompletion.create(
            model=model_engine,
            messages=[
                {"role": "system", "content": "–í–∏ - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"},
                {"role": "user", "content": prompt}],
            max_tokens=max_tokens,
            temperature=0.6,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0
        )

        if completion.choices:
            bot_reply = completion.choices[0].message['content']
            await message.reply(bot_reply)
            count_requests += 1  # counting
        else:
            await message.reply("–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –ø—Ä–∏–¥—É–º–∞–≤ üòî\n"
                                "–ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑")

    else:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å /chat —Ä–∞–∑–æ–º –∑—ñ —Å–≤–æ—ó–º –∑–∞–ø–∏—Ç–∞–Ω–Ω—è–º.\n"
                            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /chat –∫–æ–ª–∏ –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π python?")

# /status command
@dp.message_handler(commands=['status'])
async def cmd_status(message: types.Message):
    current_time = time.time() # current time
    elapsed_time = int(current_time - start_time) # time elapsed since the bot was launched in seconds
    hours, rem = divmod(elapsed_time, 3600) # converting time to hours, minutes, and seconds
    minutes, seconds = divmod(rem, 60)

    # ukrainian counting system 
    count = count_requests
    if count % 10 == 1 and count % 100 != 11:
        times = "—Ä–∞–∑"
    elif count % 10 in [2, 3, 4] and count % 100 not in [12, 13, 14]:
        times = "—Ä–∞–∑–∏"
    else:
        times = "—Ä–∞–∑—ñ–≤"
    
    # add the chat command count to the status message
    status_message = f"–Ø –æ–Ω–ª–∞–π–Ω —ñ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è!\n"
    status_message += f"–Ø —Ç—É—Ç —Å–∏–∂—É –≤–∂–µ: {hours:02d}:{minutes:02d}:{seconds:02d}\n"
    status_message += f"–°—å–æ–≥–æ–¥–Ω—ñ –∑—ñ –º–Ω–æ—é —Å–ø—ñ–ª–∫—É–≤–∞–ª–∏—Å—è {count} {times} üëÄ"
    
    await message.answer(status_message)


# /git command
@dp.message_handler(commands=['git'])
async def cmd_help(message: types.Message):
    link = "https://github.com/eqoffical/ChatGPT-Telegram-Bot.git"
    await message.answer("–û—Å—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º—ñ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π <a href='{}'>GitHub</a>".format(link), parse_mode=types.ParseMode.HTML)

# /kill command
@dp.message_handler(commands=['kill'])
async def cmd_kill(message: types.Message):
    if message.from_user.username == username: 
        await message.reply("–Ø –ø—ñ—à–æ–≤ —Å–ø–∞—Ç–∏ üò¥\n"
                            "–ù–∞ –¥–æ–±—Ä–∞–Ω—ñ—á!")
        # Stop the event loop
        await dp.storage.close()
        await dp.storage.wait_closed()
        exit()
    else:
        await message.reply("–í–∏ —Ö–æ—á–µ—Ç–µ –º–µ–Ω–µ –≤–±–∏—Ç–∏?!üò®\n"
                            "–í–±–∏–≤—Ü—è!")

# message handler
@dp.message_handler(commands=['help', 'chat', 'status', 'git', 'kill'])
async def gpt_answer(message: types.Message):
    pass

# run long-polling
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
