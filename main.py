import config
import logging
import openai
import asyncio
import time
from aiogram import Bot, Dispatcher, executor, types

# log
logging.basicConfig(level=logging.INFO)

# launch time
start_time = time.time()

# init openai
openai.api_key = config.OPENAI_TOKEN

# init aiogram
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)

# /help command
@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
                         "/help - –ü–æ–∫–∞–∑—É—î –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏\n"
                         "/chat - –ü–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –±–æ—Ç–æ–º / –∑–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è\n"
                         "/status - –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –±–æ—Ç—É")

# /start command
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç üëã\n"
                        "–ß–∏–º —è –º–æ–∂—É –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏?\n"
                        "–ù–∞–ø–∏—à—ñ—Ç—å /help —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏.")

# /chat command
@dp.message_handler(commands=['chat'])
async def cmd_chat(message: types.Message):
    # remove the '/chat' command from the user's message to get the question
    question = message.text.replace('/chat', '', 1).strip()
    if question:
        model_engine = "text-davinci-003"
        max_tokens = 1024  # default 1024
        prompt = question
        completion = openai.Completion.create(
            engine=model_engine,
            prompt=prompt,
            max_tokens=max_tokens,
            temperature=0.5,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0
        )

        await message.answer("–î—É–º–∞—é . . .")
        await message.answer(completion.choices[0].text)
    else:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å /chat —Ä–∞–∑–æ–º –∑—ñ —Å–≤–æ—ó–º –∑–∞–ø–∏—Ç–∞–Ω–Ω—è–º.\n"
                            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /chat –∫–æ–ª–∏ –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π python?")


# /status command
@dp.message_handler(commands=['status'])
async def cmd_status(message: types.Message):
    current_time = time.time() # current time
    elapsed_time = int(current_time - start_time) # time elapsed since the bot was launched in seconds
    hours, rem = divmod(elapsed_time, 3600) # converting time to hours, minutes, and seconds
    minutes, seconds = divmod(rem, 60)
    
    status_message = f"–Ø –æ–Ω–ª–∞–π–Ω —ñ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è!\n"
    status_message += f"–Ø —Ç—É—Ç —Å–∏–∂—É –≤–∂–µ: {hours:02d}:{minutes:02d}:{seconds:02d}"
    await message.answer(status_message)

# message handler
@dp.message_handler(commands=['help', 'chat', 'status'])
async def gpt_answer(message: types.Message):
    pass

# run long-polling
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
